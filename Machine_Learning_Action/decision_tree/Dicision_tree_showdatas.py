#!/usr/bin/env python# -*- coding: utf-8 -*-import matplotlib.pyplot as pltfrom Decision_tree import create_dataset, create_treefrom matplotlib.font_manager import FontPropertiesdef get_leafs_num(tree):    """函数说明: 获取决策树叶子结点的数目    Args:        tree: 决策树    Returns:        leafs_num: 决策树的叶子结点的数目    """    leafs_num = 0  # 初始化叶子数目    first_str = next(iter(tree))    second_dict = tree[first_str]  # 下一组字典    for key in second_dict.keys():        # 若结点不是字典，则为叶结点        if type(second_dict[key]).__name__ == 'dict':            leafs_num += get_leafs_num(second_dict[key])        else:            leafs_num += 1    return leafs_numdef get_tree_depth(tree):    """函数说明: 获取决策树的层数    Args:        tree: 决策树    Returns:        max_depth: 决策树的层数    """    max_depth = 0  # 初始化决策树深度    first_str = next(iter(tree))    second_dict = tree[first_str]  # 下一组字典    for key in second_dict.keys():        # 若结点不是字典，则为叶结点        if type(second_dict[key]).__name__ == 'dict':            this_depth = 1 + get_tree_depth(second_dict[key])        else:            this_depth = 1        if this_depth > max_depth:  # 更新数据            max_depth = this_depth    return max_depthdef plot_node(node_txt, center_pt, parent_pt, node_type):    """函数说明: 绘制结点    Args:        node_txt: 结点名        center_pt: 文本位置        parent_pt: 标注的箭头位置        node_type: 结点格式    Returns:        无    """    # 定义箭头格式    arrow_args = dict(arrowstyle="<-")    # 设置中文字体    font = FontProperties(fname=r"C:/windows/fonts/simsun.ttc", size=14)    # 绘制结点    create_plot.ax1.annotate(node_txt, xy=parent_pt, xycoords='axes fraction', xytext=center_pt,                             textcoords='axes fraction', va="center", ha="center", bbox=node_type,                             arrowprops=arrow_args, FontProperties=font)def plot_mid_text(center_pt, parent_pt, txt_string):    """函数说明: 标注有向边属性值    Args:        center_pt: 用于计算标注位置        parent_pt: 用于计算标注位置        txt_string: 标注内容    Returns:        无    """    x_mid = (parent_pt[0] - center_pt[0]) / 2.0 + center_pt[0]  # 计算标注位置    y_mid = (parent_pt[1] - center_pt[1]) / 2.0 + center_pt[1]    create_plot.ax1.text(x_mid, y_mid, txt_string, va="center", ha="center", rotation=30)def plot_tree(tree, parent_pt, node_txt):    """函数说明: 绘制决策树    Args:        tree: 决策树(字典)        parent_pt: 标注的内容        node_txt: 结点名    Returns:        无    """    decision_node = dict(boxstyle="sawtooth", fc="0.8")  # 结点格式    leaf_node = dict(boxstyle="round4", fc="0.8")  # 叶结点格式    leafs_num = get_leafs_num(tree)  # 叶结点数目(树的宽度)    first_str = next(iter(tree))  # 下个字典    # 中心位置    center_pt = (plot_tree.xOff + (1.0 + float(leafs_num)) / 2.0 / plot_tree.totalW, plot_tree.yOff)    # 标注有向边属性值    plot_mid_text(center_pt, parent_pt, node_txt)    # 绘制结点    plot_node(first_str, center_pt, parent_pt, decision_node)    second_dict = tree[first_str]  # 下个字典    plot_tree.yOff = plot_tree.yOff - 1.0 / plot_tree.totalD  # y偏移    for key in second_dict.keys():        if type(second_dict[key]).__name__ == 'dict':            # 若该结点是字典，则此结点不是叶子结点，递归调用继续绘制            plot_tree(second_dict[key], center_pt, str(key))        else:            # 若该结点是叶子结点，绘制叶结点，并标注有向边属性值            plot_tree.xOff = plot_tree.xOff + 1.0 / plot_tree.totalW            plot_node(second_dict[key], (plot_tree.xOff, plot_tree.yOff), center_pt, leaf_node)            plot_mid_text((plot_tree.xOff, plot_tree.yOff), center_pt, str(key))    plot_tree.yOff = plot_tree.yOff + 1.0 / plot_tree.totalDdef create_plot(tree):    fig = plt.figure(1, facecolor='white')    fig.clf()    ax_props = dict(xticks=[], yticks=[])    create_plot.ax1 = plt.subplot(111, frameon=False, **ax_props)  # 去掉x，y轴    plot_tree.totalW = float(get_leafs_num(tree))  # 叶结点数目    plot_tree.totalD = float(get_tree_depth(tree))  # 决策树层数    plot_tree.xOff = -0.5 / plot_tree.totalW  # x偏移    plot_tree.yOff = 1.0  # y偏移    plot_tree(tree, (0.5, 1.0), '')  # 绘制决策树    plt.show()if __name__ == '__main__':    dataset, labels = create_dataset()    feat_labels = []    my_tree = create_tree(dataset, labels, feat_labels)    print(my_tree)    create_plot(my_tree)